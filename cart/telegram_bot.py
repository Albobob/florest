import requests
from django.conf import settings
from .models import TelegramNotification, Order
import logging

logger = logging.getLogger(__name__)

def handle_check_command(message):
    """Handle the /check command and store the user's chat ID"""
    logger.info("Received /check command with message: %s", message)
    
    chat_id = message.get('chat', {}).get('id')
    if not chat_id:
        logger.error("No chat_id found in message")
        return
    
    logger.info("Processing /check for chat_id: %s", chat_id)
    
    # Get user information from message
    username = message.get('from', {}).get('username')
    first_name = message.get('from', {}).get('first_name')
    
    logger.info("User info - username: %s, first_name: %s", username, first_name)
    
    try:
        # Create or update the TelegramNotification entry
        notification, created = TelegramNotification.objects.get_or_create(
            chat_id=str(chat_id),
            defaults={
                'is_active': False,
                'username': username,
                'first_name': first_name
            }
        )
        
        if not created:
            # Update user information if it changed
            notification.username = username
            notification.first_name = first_name
            notification.save()
            logger.info("Updated existing notification for chat_id: %s", chat_id)
        else:
            logger.info("Created new notification for chat_id: %s", chat_id)
        
        # Prepare response message
        if created:
            message_text = (
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name or username or '—É–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
                "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "üìù –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                f"‚Ä¢ ID —á–∞—Ç–∞: {chat_id}\n"
                f"‚Ä¢ –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"‚Ä¢ Username: {username or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
            )
        else:
            status = "–∞–∫—Ç–∏–≤–µ–Ω" if notification.is_active else "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            message_text = (
                f"‚ÑπÔ∏è {first_name or username or '–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}, "
                "–≤–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                "üìù –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                f"‚Ä¢ ID —á–∞—Ç–∞: {chat_id}\n"
                f"‚Ä¢ –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"‚Ä¢ Username: {username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}"
            )
        
        logger.info("Sending response message to chat_id: %s", chat_id)
        
        # Send response
        response = requests.post(
            f'https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage',
            json={
                'chat_id': chat_id,
                'text': message_text,
                'parse_mode': 'HTML'
            }
        )
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        logger.info("Successfully sent response message")
        
    except Exception as e:
        logger.error("Error in handle_check_command: %s", str(e), exc_info=True)
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            requests.post(
                f'https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage',
                json={
                    'chat_id': chat_id,
                    'text': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    'parse_mode': 'HTML'
                }
            )
        except Exception as send_error:
            logger.error("Error sending error message: %s", str(send_error))

def send_telegram_notification(order):
    """Send notification about new order to approved Telegram chats"""
    if not hasattr(settings, 'TELEGRAM_BOT_TOKEN'):
        return
    
    # Get all active notification subscribers
    active_subscribers = TelegramNotification.objects.filter(is_active=True)
    
    message = f"""
üå± –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}!

üë§ –ö–ª–∏–µ–Ω—Ç: {order.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}
üìß Email: {order.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç –ê–¥—Ä–µ—Å: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üõçÔ∏è –¢–æ–≤–∞—Ä—ã:
"""
    for item in order.items.all():
        message += f"‚Ä¢ {item.product.name} x{item.quantity} = {item.price * item.quantity} ‚ÇΩ\n"
    
    message += f"\nüí∞ –ò—Ç–æ–≥–æ: {order.total_amount} ‚ÇΩ"
    
    # Send to all active subscribers
    for subscriber in active_subscribers:
        try:
            requests.post(
                f'https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage',
                json={
                    'chat_id': subscriber.chat_id,
                    'text': message,
                    'parse_mode': 'HTML'
                }
            )
        except Exception as e:
            print(f"Error sending notification to {subscriber.chat_id}: {e}") 